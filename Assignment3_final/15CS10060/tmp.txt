 RULE:	type_specifiers 	->	 INT 
  RULE:	declaration_specifiers_opt 	->	 empty
 RULE:	declaration_specifiers 	->	 type_specifiers declaration_specifiers_opt
 RULE:	direct_declarator 	->	 identifier
 RULE:	direct_declarator 	->	 direct_declarator()

 RULE:	declarator 	->	 direct_declarator

	 RULE:	type_specifiers 	->	 INT 
  RULE:	declaration_specifiers_opt 	->	 empty
 RULE:	declaration_specifiers 	->	 type_specifiers declaration_specifiers_opt
 RULE:	direct_declarator 	->	 identifier
  RULE:	declarator 	->	 direct_declarator
 RULE : primary_expression 	->		 constant
RULE:	 postfix_expression 	->	primary_expression
 RULE:	unary_expression 	->	 postfix_expression
 RULE:	cast_expression 	->	 unary_expression
 RULE:	multiplicative_expression 	->	 cast_expression
 RULE:	additive_expression 	->	 multiplicative_expression
 RULE:	shift_expression 	->	 additive_expression
 RULE:	relational_expression 	->	 shift_expression
 RULE:	equality_expression 	->	 relational_expression
 RULE:	and_expression 	->	 equality_expression
 RULE:	exclusive_or_expression 	->	 and_expression
 RULE:	inclusive_or_expression 	->	 exclusive_or_expression
 RULE:	logical_and_expression 	->	 inclusive_or_expression
 RULE:	logical_or_expression 	->	 logical_and_expression
 RULE:	conditional_expression 	->	 logical_or_expression
 RULE:	assignment_expression 	->	 conditional_expression
 RULE:	initializer 	->	 assignment_expression 
 RULE:	init_declarator 	->	 declarator = initializer
 RULE:	init_declarator_list 	->	 init_declarator
 RULE:	declaration 	->	 declaration_specifiers init_declarator_list ; 
 RULE:	block_item 	->	 declaration
 RULE:	block_item_list 	->	 block_item

 RULE:	compound_statement 	->	 { block_item_list } 
 RULE:	function_definition 	->	 declaration_specifiers declarator compound_statement
 RULE:	external_decalaration 	->	 function_definition
 RULE:	translation_unit 	->	 external_decalaration

